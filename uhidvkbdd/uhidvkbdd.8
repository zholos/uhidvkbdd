.Dd July 27, 2014
.Dt UHIDVKBDD 8
.Os
.
.Sh NAME
.Nm uhidvkbdd
.Nd Driver for USB media keys
.
.Sh SYNOPSIS
.Nm
.Op Fl d
.Ar device
.
.Sh DESCRIPTION
The
.Nm
daemon is a simple way to get media keys on some keyboards working in X11. Such
keyboards present separate interfaces: a basic USB keyboard which is handled by
the kernel
.Xr ukbd 4
driver and a USB HID device that reports the media keys which is handled by the
generic
.Xr uhid 4
driver.
.Nm
reads consumer control inputs from the latter and translates them via
.Xr vkbd 4
into conventional media keyboard scancodes, which are mapped in X11 by default.
.Pp
On startup the daemon opens
.Ar device
and checks its report descriptor for relevant consumer inputs. If there are
none, it exits. Otherwise, it continues running in the background and translates
inputs. Note that the report descriptor may list more inputs than the device can
actually generate, so the daemon may continue running for some irrelevant
devices.
.Pp
The option is:
.Bl -tag -width indent
.It Fl d
Run in the foreground. This will print information about available consumer
inputs and generated keyboard scancodes.
.El
.
.Sh SETTING UP
First, check whether your keyboard is compatible. Run the daemon with
.Fl d
for each
.Pa uhid*
device and check the output.
.Pp
Here is an example of an irrelevant device
.Po
a webcam with a few buttons that don't have mapped scancodes
.Pc :
.Bd -literal -offset indent
# ./uhidvkbdd -d uhid0
report: application b0001, usage b0020 - ignored
report: application b0001, usage b0024 - ignored
report: application b0001, usage b002f - ignored
report: application b0001, usage b0050 - ignored
report: application b0001, usage c00b2 - ignored
report: application b0001, usage c00b7 - ignored
uhidvkbdd: uhid0: no mapped consumer inputs found
.Ed
.Pp
And here is an example of media keys on a keyboard, and what happens when they
are pressed:
.Bd -literal -offset indent
# ./uhidvkbdd -d uhid1
report: application c0001, usage c0000-c0fff - mapped
input: usage c00cd = 1
scancodes: e0 22
input: usage c00cd = 0
scancodes: e0 a2
input: usage c00e9 = 1
scancodes: e0 30
input: usage c00e9 = 0
scancodes: e0 b0
.Ed
.Pp
You can also use
.Xr usbhidctl 1
to get more information about the device:
.Pp
.Dl # usbhidctl -f uhid1 -vrla
.Ed
.Pp
.Nm
comes with an
.Sy rc.d
script that automatically runs the daemon for every existing
.Pa uhid*
device and a
.Xr devd 8
configuration file that runs the daemon for every newly attached device. The
intent is to avoid additional configuration even if device unit numbers change.
Since the daemon checks for relevant consumer inputs on startup, irrelevant
devices like joysticks will still be accessible to other programs.
.Pp
Enable this behavior in
.Pa /etc/rc.conf :
.Pp
.Dl uhidvkbdd_enable=YES
.Pp
Then start it with
.Pp
.Dl # service uhidvkbdd start
.Pp
If everything worked, you should see at least one
.Li uhidvkbdd
process running, and a new virtual
.Pa kbd*
device in
.Xr dmesg 8 .
.Pp
Now, check the current X11 keyboard configuration with
.Pp
.Dl $ setxkbmap -print
.Pp
The scancodes generated by the daemon match the default X11 keyboard model
.Li pc105 ,
so they should already be mapped to X11 symbols like
.Li XF86AudioPlay .
When this is the case, the
.Va xkb_symbols
setting displayed mentions
.Li +inet(pc105)
or a similar mapping like
.Li +inet(media_nav_common) .
.Pp
Finally, check that the keys actually work and generate appropriate symbols with
.Pp
.Dl $ xev -events keyboard
.Pp
One hitch is that on FreeBSD some of the scancodes are remapped by an extra
.Li xf86-input-keyboard
port patch. To undo its effect, use the following
.Pa ~/.Xmodmap :
.Bd -literal -offset indent
keycode 140 = XF86AudioMute
keycode 152 = XF86Search
keycode 154 = XF86Reload
.Ed
.
.Sh WHAT NEXT
Enjoy your awesome keyboard and the additional level of control.
.Pp
Some programs work with multimedia keys automatically. For instance, the Xfce
audio mixer panel applet captures and handles the volume keys when installed
with the
.Ev KEYBIND
port option.
.
.Sh ALTERNATIVES
.Xr usbhidaction 1
can be configured to map arbitrary USB HID inputs to commands, including
.Xr mixer 8
controls and writing scancodes to
.Pa /dev/vkbdctl0 .
.Pp
.Xr uhidd 8
also translates media keys into scancodes, but handles the entire USB endpoint
.Po
.Pa ugen*.*
.Pc ,
not just one interface
.Po
.Pa uhid*
.Pc ,
so it has to replace the kernel
.Xr ukbd 4
driver for the main keys too.
.
.Sh SEE ALSO
.Xr usbhidctl 1 ,
.Xr usbhidaction 1 ,
.Xr uhidd 8 ,
.Xr uhid 4 ,
.Xr vkbd 4
.
.Sh AUTHORS
.An -nosplit
.Nm
was written by
.An Andrey Zholos Aq aaz@q-fu.com
